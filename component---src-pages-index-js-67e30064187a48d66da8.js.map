{"version":3,"file":"component---src-pages-index-js-67e30064187a48d66da8.js","mappings":"6JA8DA,IA1DY,WAAO,IAAD,IACVA,GAAOC,EAAAA,EAAAA,gBAAe,cAiBtBC,EAA+B,QAAzB,EAAGF,EAAKG,KAAKC,oBAAY,aAAtB,EAAwBF,OACjCG,EAA+B,QAAzB,EAAGL,EAAKG,KAAKC,oBAAY,aAAtB,EAAwBC,OAEvC,OACE,uBAAKC,UAAU,OACb,gBAAC,EAAAC,EAAW,CACVD,UAAU,aACVE,OAAO,QACPC,IAAI,4BACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBAAiB,uBAEtBX,aAAM,EAANA,EAAQY,OACP,sCACa,IACX,qBACEC,KAAK,kCACLC,OAAO,SACPC,IAAI,uBAEJ,8BAASf,EAAOY,OACb,KACJZ,aAAM,EAANA,EAAQgB,UAAW,KAAI,qCAGxB,qBACEH,KAAI,yBAAyBV,aAAM,EAANA,EAAQc,UAAO,IAC5CH,OAAO,SACPC,IAAI,uBAAqB,YAQrC,C,wFCzDqBG,EAAW,6FA+D7B,OA/D6B,EAC9BC,YAAA,WAaE,OAZsBC,KAAKC,MAAnBC,UAELC,KAAI,SAAAC,GACH,MAAO,CACLC,SAAUD,EAASE,GACnBC,KAAMH,EAASI,OAAOC,KACtBC,MAAON,EAASO,YAAYD,MAC5BE,KAAMR,EAASS,WACfC,KAAMV,EAASO,YAAYG,KAC3BC,YAAaX,EAASO,YAAYI,aAAeX,EAASY,QAE9D,GAEJ,EAAC,EAEDC,OAAA,WACE,IAAMC,EAAWlB,KAAKD,cAEtB,OACE,2BACGmB,EAASf,KAAI,SAAAgB,GACZ,OACE,2BACEnC,UAAU,iBACVoC,WAAS,EACTC,SAAS,6BAET,8BACE,2BACE,0BACE,gBAAC,EAAAC,KAAI,CACHC,GAAIJ,EAAKZ,KACTiB,IAAKL,EAAKd,SACVoB,SAAS,MACTzC,UAAU,iBAEV,wBAAMyC,SAAS,YAAYN,EAAKT,SAGpC,yBACE,6BAAQS,EAAKL,MAAa,KAAG,IAC7B,6BAAQK,EAAKP,KAAI,gBAIvB,2BACE,qBACEc,wBAAyB,CACvBC,OAAQR,EAAKJ,aAEfU,SAAS,gBAEX,gBAAC,EAAAH,KAAI,CAACC,GAAIJ,EAAKZ,KAAMiB,IAAKL,EAAKd,SAAUoB,SAAS,OAChD,wBAAMA,SAAS,YAAU,iBAKnC,IAGN,EAAC,EA/D6B,CAASG,EAAAA,U,kFCgCzC,UA3BkB,SAAH,GAA4B,IAAD,EAArBlD,EAAI,EAAJA,KAAMmD,EAAQ,EAARA,SACnBC,GAAkC,QAAtB,EAAApD,EAAKG,KAAKC,oBAAY,aAAtB,EAAwB4B,QAAK,QACzCqB,EAAQrD,EAAKsD,kBAAkBC,MAErC,OAAqB,IAAjBF,EAAMG,OAEN,gBAAC,IAAM,CAACL,SAAUA,EAAUnB,MAAOoB,GACjC,gBAAC,IAAG,CAACpB,MAAM,cACX,gBAAC,IAAG,MACJ,uLAUJ,gBAAC,IAAM,CAACmB,SAAUA,EAAUnB,MAAOoB,GACjC,gBAAC,IAAG,CAACpB,MAAM,cACX,gBAAC,IAAG,MACJ,gBAAC,IAAW,CAACR,UAAW6B,IAG9B,C","sources":["webpack://heriswn.github.io/./src/components/bio.js","webpack://heriswn.github.io/./src/components/postList.js","webpack://heriswn.github.io/./src/pages/index.js"],"sourcesContent":["import * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        src=\"../assets/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          Written by{\" \"}\n          <a\n            href=\"https://herisetiawan.vercel.app\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <strong>{author.name}</strong>\n          </a>{\" \"}\n          {author?.summary || null}\n          {` `}\n          You should follow them on {` `}\n          <a\n            href={`https://twitter.com/${social?.twitter || ``}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Twitter\n          </a>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import React, { Component } from \"react\"\nimport { Link } from \"gatsby\"\n\nexport default class PostListing extends Component {\n  getPostList() {\n    const { postEdges } = this.props\n    const postList = postEdges\n      .map(postEdge => {\n        return {\n          idUnique: postEdge.id,\n          path: postEdge.fields.slug,\n          title: postEdge.frontmatter.title,\n          read: postEdge.timeToRead,\n          date: postEdge.frontmatter.date,\n          description: postEdge.frontmatter.description || postEdge.excerpt,\n        }\n      })\n    return postList\n  }\n\n  render() {\n    const postList = this.getPostList()\n\n    return (\n      <div>\n        {postList.map(post => {\n          return (\n            <article\n              className=\"post-list-item\"\n              itemScope\n              itemType=\"http://schema.org/Article\"\n            >\n              <header>\n                <div>\n                  <h2>\n                    <Link\n                      to={post.path}\n                      key={post.idUnique}\n                      itemProp=\"url\"\n                      className=\"postList-link\"\n                    >\n                      <span itemProp=\"headline\">{post.title}</span>\n                    </Link>\n                  </h2>\n                  <p>\n                    <small>{post.date}</small> •{\" \"}\n                    <small>{post.read} min read</small>\n                  </p>\n                </div>\n              </header>\n              <div>\n                <p\n                  dangerouslySetInnerHTML={{\n                    __html: post.description,\n                  }}\n                  itemProp=\"description\"\n                />\n                <Link to={post.path} key={post.idUnique} itemProp=\"url\">\n                  <span itemProp=\"headline\">Read More →</span>\n                </Link>\n              </div>\n            </article>\n          )\n        })}\n      </div>\n    )\n  }\n}","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport PostListing from \"../components/postList\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"All posts\" />\n      <Bio />\n      <PostListing postEdges={posts} />\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        id\n        excerpt\n        fields {\n          slug\n        }\n        timeToRead\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          template\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","src","width","height","quality","alt","name","href","target","rel","summary","twitter","PostListing","getPostList","this","props","postEdges","map","postEdge","idUnique","id","path","fields","slug","title","frontmatter","read","timeToRead","date","description","excerpt","render","postList","post","itemScope","itemType","Link","to","key","itemProp","dangerouslySetInnerHTML","__html","Component","location","siteTitle","posts","allMarkdownRemark","nodes","length"],"sourceRoot":""}