{"version":3,"file":"component---src-templates-category-page-js-4d7d8da271b29b19c4d8.js","mappings":"4LAGqBA,EAAW,6FA+D7B,OA/D6B,EAC9BC,YAAA,WAaE,OAZsBC,KAAKC,MAAnBC,UAELC,KAAI,SAAAC,GACH,MAAO,CACLC,SAAUD,EAASE,GACnBC,KAAMH,EAASI,OAAOC,KACtBC,MAAON,EAASO,YAAYD,MAC5BE,KAAMR,EAASS,WACfC,KAAMV,EAASO,YAAYG,KAC3BC,YAAaX,EAASO,YAAYI,aAAeX,EAASY,QAE9D,GAEJ,EAAC,EAEDC,OAAA,WACE,IAAMC,EAAWlB,KAAKD,cAEtB,OACE,2BACGmB,EAASf,KAAI,SAAAgB,GACZ,OACE,2BACEC,UAAU,iBACVC,WAAS,EACTC,SAAS,6BAET,8BACE,2BACE,0BACE,gBAAC,EAAAC,KAAI,CACHC,GAAIL,EAAKZ,KACTkB,IAAKN,EAAKd,SACVqB,SAAS,MACTN,UAAU,iBAEV,wBAAMM,SAAS,YAAYP,EAAKT,SAGpC,yBACE,6BAAQS,EAAKL,MAAa,KAAG,IAC7B,6BAAQK,EAAKP,KAAI,gBAIvB,2BACE,qBACEe,wBAAyB,CACvBC,OAAQT,EAAKJ,aAEfW,SAAS,gBAEX,gBAAC,EAAAH,KAAI,CAACC,GAAIL,EAAKZ,KAAMkB,IAAKN,EAAKd,SAAUqB,SAAS,OAChD,wBAAMA,SAAS,YAAU,iBAKnC,IAGN,EAAC,EA/D6B,CAASG,EAAAA,U,wECkBzC,UAf6B,SAAH,GAAyC,IAAD,EAAlCC,EAAI,EAAJA,KAAMC,EAAQ,EAARA,SAAUC,EAAW,EAAXA,YACxCC,GAAQH,aAAI,EAAJA,EAAMI,kBAAkBC,QAAS,GACzCC,GAAkC,QAAtB,EAAAN,EAAKO,KAAKC,oBAAY,aAAtB,EAAwB5B,QAAK,QAE/C,OACE,gBAAC,IAAM,CAACqB,SAAUA,EAAUrB,MAAO0B,GACjC,gBAAC,IAAG,CAACL,SAAUA,EAAUrB,MAAOsB,aAAW,EAAXA,EAAaO,WAC7C,0BACE,wBAAMnB,UAAU,gBAAgBY,aAAW,EAAXA,EAAaO,WAE/C,gBAAC,IAAW,CAACrC,UAAW+B,IAG9B,C","sources":["webpack://heriswn.github.io/./src/components/postList.js","webpack://heriswn.github.io/./src/templates/category-page.js"],"sourcesContent":["import React, { Component } from \"react\"\nimport { Link } from \"gatsby\"\n\nexport default class PostListing extends Component {\n  getPostList() {\n    const { postEdges } = this.props\n    const postList = postEdges\n      .map(postEdge => {\n        return {\n          idUnique: postEdge.id,\n          path: postEdge.fields.slug,\n          title: postEdge.frontmatter.title,\n          read: postEdge.timeToRead,\n          date: postEdge.frontmatter.date,\n          description: postEdge.frontmatter.description || postEdge.excerpt,\n        }\n      })\n    return postList\n  }\n\n  render() {\n    const postList = this.getPostList()\n\n    return (\n      <div>\n        {postList.map(post => {\n          return (\n            <article\n              className=\"post-list-item\"\n              itemScope\n              itemType=\"http://schema.org/Article\"\n            >\n              <header>\n                <div>\n                  <h2>\n                    <Link\n                      to={post.path}\n                      key={post.idUnique}\n                      itemProp=\"url\"\n                      className=\"postList-link\"\n                    >\n                      <span itemProp=\"headline\">{post.title}</span>\n                    </Link>\n                  </h2>\n                  <p>\n                    <small>{post.date}</small> •{\" \"}\n                    <small>{post.read} min read</small>\n                  </p>\n                </div>\n              </header>\n              <div>\n                <p\n                  dangerouslySetInnerHTML={{\n                    __html: post.description,\n                  }}\n                  itemProp=\"description\"\n                />\n                <Link to={post.path} key={post.idUnique} itemProp=\"url\">\n                  <span itemProp=\"headline\">Read More →</span>\n                </Link>\n              </div>\n            </article>\n          )\n        })}\n      </div>\n    )\n  }\n}","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport PostListing from \"../components/postList\"\n\nconst CategoryPageTemplate = ({ data, location, pageContext }) => {\n  const posts = data?.allMarkdownRemark.nodes || []\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo location={location} title={pageContext?.category} />\n      <h1>\n        <span className=\"category-tag\">{pageContext?.category}</span>\n      </h1>\n      <PostListing postEdges={posts} />\n    </Layout>\n  )\n}\n\nexport default CategoryPageTemplate\n\nexport const pageQuery = graphql`\n  query CategoryPageByType($category: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: { frontmatter: { categories: { eq: $category } } }\n    ) {\n      nodes {\n        id\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["PostListing","getPostList","this","props","postEdges","map","postEdge","idUnique","id","path","fields","slug","title","frontmatter","read","timeToRead","date","description","excerpt","render","postList","post","className","itemScope","itemType","Link","to","key","itemProp","dangerouslySetInnerHTML","__html","Component","data","location","pageContext","posts","allMarkdownRemark","nodes","siteTitle","site","siteMetadata","category"],"sourceRoot":""}